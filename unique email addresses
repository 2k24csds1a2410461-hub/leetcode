

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int compareStrings(const void *a, const void *b) {
    return strcmp(*(const char **)a, *(const char **)b);
}

int numUniqueEmails(char **emails, int emailsSize) {
    if (emailsSize == 0) {
        return 0;
    }

    char **normalizedEmails = (char **)malloc(emailsSize * sizeof(char *));
    if (normalizedEmails == NULL) {
        return 0;
    }

    for (int i = 0; i < emailsSize; i++) {
        char *email = emails[i];
        char *atSign = strchr(email, '@');
        int localNameLen = atSign - email;
        char *domainName = atSign + 1;

        // Allocate memory for the normalized local name
        char *normalizedLocalName = (char *)malloc(localNameLen + 1);
        if (normalizedLocalName == NULL) {
            // Cleanup and exit on allocation failure
            for (int k = 0; k < i; k++) {
                free(normalizedEmails[k]);
            }
            free(normalizedEmails);
            return 0;
        }

        int j = 0;
        for (int k = 0; k < localNameLen; k++) {
            if (email[k] == '+') {
                break;
            }
            if (email[k] != '.') {
                normalizedLocalName[j++] = email[k];
            }
        }
        normalizedLocalName[j] = '\0';

        // Allocate memory for the full normalized email
        int fullEmailLen = strlen(normalizedLocalName) + 1 + strlen(domainName);
        normalizedEmails[i] = (char *)malloc(fullEmailLen + 1);
        if (normalizedEmails[i] == NULL) {
            // Cleanup and exit on allocation failure
            free(normalizedLocalName);
            for (int k = 0; k < i; k++) {
                free(normalizedEmails[k]);
            }
            free(normalizedEmails);
            return 0;
        }
        
        // Construct the full normalized email
        strcpy(normalizedEmails[i], normalizedLocalName);
        strcat(normalizedEmails[i], "@");
        strcat(normalizedEmails[i], domainName);
        
        free(normalizedLocalName);
    }
    
    // Sort the array to easily find duplicates
    qsort(normalizedEmails, emailsSize, sizeof(char *), compareStrings);

    int uniqueCount = 0;
    if (emailsSize > 0) {
        uniqueCount = 1;
        for (int i = 1; i < emailsSize; i++) {
            if (strcmp(normalizedEmails[i], normalizedEmails[i-1]) != 0) {
                uniqueCount++;
            }
        }
    }
    for (int i = 0; i < emailsSize; i++) {
        free(normalizedEmails[i]);
    }
    free(normalizedEmails);
    
    return uniqueCount;
}
